eyJhbGciOiJIUzI1NiJ9.cGlwZWxpbmU6CiAgIyByZXN0b3JlIHRoZSBjYWNoZSBmcm9tIGFuIHNmdHAgc2VydmVyCiAgcmVzdG9yZV9jYWNoZToKICAgIGltYWdlOiBhcHBsZWJveS9kcm9uZS1zZnRwLWNhY2hlCiAgICByZXN0b3JlOiB0cnVlCiAgICBtb3VudDogWyAuZ2xpZGUsIHZlbmRvciBdCiAgICBpZ25vcmVfYnJhbmNoOiB0cnVlCgogIGJ1aWxkOgogICAgaW1hZ2U6IGFwcGxlYm95L2dvbGFuZy10ZXN0aW5nOiR7R09fVkVSU0lPTn0KICAgIHB1bGw6IHRydWUKICAgIGVudmlyb25tZW50OgogICAgICAtIEdPUEFUSD0vZ28KICAgIGNvbW1hbmRzOgogICAgICAtIGdsaWRlIGluc3RhbGwKICAgICAgLSBjb3ZlcmFnZSBhbGwKCiAgbm90aWZ5XzE6CiAgICBwdWxsOiB0cnVlCiAgICBpbWFnZTogcGx1Z2lucy9zbGFjawogICAgY2hhbm5lbDogamVua2lucwogICAgdXNlcm5hbWU6IGRyb25lCiAgICB3aGVuOgogICAgICBzdGF0dXM6IFsgc3VjY2VzcywgZmFpbHVyZSBdCiAgICB0ZW1wbGF0ZTogPgogICAgICB7eyNzdWNjZXNzIGJ1aWxkLnN0YXR1c319CiAgICAgICAge3sgYnVpbGQuYXV0aG9yIH19IHN1Y2Nlc3NmdWxseSBwdXNoZWQgdG8ge3sgYnVpbGQuYnJhbmNofX0KICAgICAge3tlbHNlfX0KICAgICAgICB7eyBidWlsZC5hdXRob3IgfX0gYnJva2UgdGhlIGJ1aWxkLiBIYW5nIHlvdXIgaGVhZCBpbiBzaGFtZS4KICAgICAge3svc3VjY2Vzc319CiAgICBpbWFnZV91cmw6IGh0dHBzOi8vY2RuMy5pY29uZmluZGVyLmNvbS9kYXRhL2ljb25zL3BpY29ucy1zb2NpYWwvNTcvMTYtYXBwbGUtMTI4LnBuZwoKICBub3RpZnlfMjoKICAgIHB1bGw6IHRydWUKICAgIGltYWdlOiBwbHVnaW5zL3NsYWNrCiAgICBjaGFubmVsOiBkcm9uZQogICAgdXNlcm5hbWU6IGRyb25lCiAgICB3aGVuOgogICAgICBzdGF0dXM6IFsgc3VjY2VzcywgZmFpbHVyZSBdCiAgICB0ZW1wbGF0ZTogfAogICAgICB7eyNzdWNjZXNzIGJ1aWxkLnN0YXR1c319CiAgICAgICAge3sgYnVpbGQuYXV0aG9yIH19IHN1Y2Nlc3NmdWxseSBwdXNoZWQgdG8ge3sgYnVpbGQuYnJhbmNofX0KICAgICAge3tlbHNlfX0KICAgICAgICB7eyBidWlsZC5hdXRob3IgfX0gYnJva2UgdGhlIGJ1aWxkLiBIYW5nIHlvdXIgaGVhZCBpbiBzaGFtZS4KICAgICAge3svc3VjY2Vzc319CgogIHNsYWNrOgogICAgaW1hZ2U6IHBsdWdpbnMvc2xhY2sKICAgIGNoYW5uZWw6IGRyb25lCiAgICB1c2VybmFtZTogZHJvbmUKICAgIHdoZW46CiAgICAgIHN0YXR1czogWyBraWxsZWQsIHN1Y2Nlc3MsIGZhaWx1cmUgXQogICAgdGVtcGxhdGU6IHwKICAgICAgKnt7IGJ1aWxkLnN0YXR1cyB9fSogPHt7IGJ1aWxkLmxpbmsgfX18e3sgcmVwby5vd25lciB9fS97eyByZXBvLm5hbWUgfX0je3sgdHJ1bmNhdGUgYnVpbGQuY29tbWl0IDggfX0-ICh7eyBidWlsZC5icmFuY2ggfX0pIGJ5IHt7IGJ1aWxkLmF1dGhvciB9fS4KICAgIGljb25fdXJsOiBodHRwczovL2NkbjMuaWNvbmZpbmRlci5jb20vZGF0YS9pY29ucy9waWNvbnMtc29jaWFsLzU3LzE2LWFwcGxlLTEyOC5wbmcKCiAgbGluZToKICAgIGltYWdlOiBhcHBsZWJveS9kcm9uZS1saW5lCiAgICBwdWxsOiB0cnVlCiAgICB0bzogdTM1OTY1MGY5MTk0MjdiNTIyOTMzMGM3MjA1YzQ3ZWU0CiAgICB3aGVuOgogICAgICBzdGF0dXM6IFsgc3VjY2VzcywgZmFpbHVyZSBdCiAgICAgIG1hdHJpeDoKICAgICAgICBHT19WRVJTSU9OOiAxLjcuMwoKICBmYWNlYm9vazoKICAgIGltYWdlOiBhcHBsZWJveS9kcm9uZS1mYWNlYm9vawogICAgcHVsbDogdHJ1ZQogICAgdG86IDEyMzQ5NzMzODY1MjQ2MTAKICAgIHdoZW46CiAgICAgIHN0YXR1czogWyBzdWNjZXNzLCBmYWlsdXJlIF0KICAgICAgbWF0cml4OgogICAgICAgIEdPX1ZFUlNJT046IDEuNy4zCgogIGd0YWxrOgogICAgaW1hZ2U6IGFwcGxlYm95L2Ryb25lLWd0YWxrCiAgICBwdWxsOiB0cnVlCiAgICB0bzoKICAgICAgLSBhcHBsZWJveS50d0BnbWFpbC5jb206YXBwbGVib3kudHdAZ21haWwuY29tCiAgICAgIC0gYXBwbGVib3kudHdAZ21haWwuY29tOnRlc3RAZ21haWwuY29tCiAgICB3aGVuOgogICAgICBzdGF0dXM6IFsgc3VjY2VzcywgZmFpbHVyZSBdCiAgICAgIG1hdHJpeDoKICAgICAgICBHT19WRVJTSU9OOiAxLjcuMwoKICB0ZWxlZ3JhbToKICAgIGltYWdlOiBhcHBsZWJveS9kcm9uZS10ZWxlZ3JhbQogICAgcHVsbDogdHJ1ZQogICAgdG86IDY1MzgyOTk5OmFwcGxlYm95LnR3QGdtYWlsLmNvbQogICAgd2hlbjoKICAgICAgc3RhdHVzOiBbIHN1Y2Nlc3MsIGZhaWx1cmUgXQogICAgICBtYXRyaXg6CiAgICAgICAgR09fVkVSU0lPTjogMS43LjMKCiAgIyByZWJ1aWxkIHRoZSBjYWNoZSBvbiB0aGUgc2Z0cCBzZXJ2ZXIKICByZWJ1aWxkX2NhY2hlOgogICAgaW1hZ2U6IGFwcGxlYm95L2Ryb25lLXNmdHAtY2FjaGUKICAgIHJlYnVpbGQ6IHRydWUKICAgIG1vdW50OiBbIC5nbGlkZSwgdmVuZG9yIF0KICAgIGlnbm9yZV9icmFuY2g6IHRydWUKICAgIHdoZW46CiAgICAgIGJyYW5jaDogbWFzdGVyCiAgICAgIG1hdHJpeDoKICAgICAgICBHT19WRVJTSU9OOiAxLjcuMwoKd29ya3NwYWNlOgogIHBhdGg6IC9nby9zcmMvZ2l0aHViLmNvbS9hcHBsZWJveS9nby1oZWxsbwoKbWF0cml4OgogIEdPX1ZFUlNJT046CiAgICAtIDEuNy4zCiAgICAtIDEuNi4zCg.hxz6_9KaMz8-BOBOdIOSkhkWAm2U_mZjZzs_W2vNUTw